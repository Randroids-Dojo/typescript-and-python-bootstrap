name: Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan every Monday at 4am UTC
    - cron: '0 4 * * 1'

jobs:
  # Python Security Scan
  python-security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pip-audit safety bandit
      
      - name: Run pip-audit
        run: |
          cd backend
          pip-audit
        continue-on-error: true
      
      - name: Run Safety check
        run: |
          cd backend
          safety check
        continue-on-error: true
      
      - name: Run Bandit security linter
        run: |
          cd backend
          bandit -r app/ -f json -o bandit-report.json
        continue-on-error: true

  # Node.js Security Scan
  nodejs-security:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: [frontend, auth-service]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      
      - name: Install dependencies
        run: |
          cd ${{ matrix.directory }}
          npm ci
      
      - name: Run npm audit
        run: |
          cd ${{ matrix.directory }}
          npm audit --audit-level=moderate
        continue-on-error: true
      
      - name: Run ESLint security plugin
        if: matrix.directory == 'frontend'
        run: |
          cd ${{ matrix.directory }}
          npm install --save-dev eslint-plugin-security
          npx eslint . --ext .ts,.tsx,.js,.jsx || true
        continue-on-error: true

  # Docker Security Scan
  docker-security:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    strategy:
      matrix:
        service: [auth-service, backend, frontend, nginx]
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '${{ matrix.service }}/Dockerfile'
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}.sarif'
        continue-on-error: true
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-${{ matrix.service }}.sarif'
        if: always()

  # CodeQL Analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'python' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # OWASP Dependency Check
  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'typescript-and-python-bootstrap'
          path: '.'
          format: 'HTML'
          args: >
            --enableRetired
            --enableExperimental
        continue-on-error: true
      
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/
        if: always()