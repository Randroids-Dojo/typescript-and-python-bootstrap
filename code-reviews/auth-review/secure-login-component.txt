import { useState } from "react"
import { useNavigate, Link } from "react-router-dom"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import * as z from "zod"
import { signIn } from "@/lib/auth-client"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form"
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"

const formSchema = z.object({
  email: z.string().email("Invalid email address"),
  password: z.string().min(8, "Password must be at least 8 characters"),
})

export default function Login() {
  const navigate = useNavigate()
  const [error, setError] = useState<string | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [loginAttempts, setLoginAttempts] = useState(0)
  const [isBlocked, setIsBlocked] = useState(false)

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      email: "",
      password: "",
    },
  })

  async function onSubmit(values: z.infer<typeof formSchema>) {
    // Client-side rate limiting
    if (loginAttempts >= 5) {
      setIsBlocked(true)
      setError("Too many login attempts. Please try again later.")
      setTimeout(() => {
        setIsBlocked(false)
        setLoginAttempts(0)
      }, 60000) // Reset after 1 minute
      return
    }

    setError(null)
    setIsLoading(true)

    try {
      const result = await signIn.email({
        email: values.email,
        password: values.password,
      })
      
      // Remove console.log in production
      if (process.env.NODE_ENV !== 'production') {
        console.log("Login result:", result)
      }
      
      // Check if the result contains an error
      if (result?.error || result?.code) {
        setLoginAttempts(prev => prev + 1)
        
        const errorCode = result.code || result.error?.code
        
        // Generic error message to prevent user enumeration
        setError("Invalid email or password. Please try again.")
        
        // Log specific error for monitoring (not to user)
        if (process.env.NODE_ENV !== 'production') {
          console.error("Login error:", errorCode)
        }
        return
      }
      
      // Only navigate if login was successful
      if (result && result.user) {
        // Clear sensitive form data
        form.reset()
        
        // Small delay to ensure session cookie is set
        setTimeout(() => {
          navigate("/dashboard")
        }, 100)
      }
    } catch (err: any) {
      setLoginAttempts(prev => prev + 1)
      
      // Generic error message
      setError("Failed to sign in. Please try again.")
      
      // Log for monitoring
      if (process.env.NODE_ENV !== 'production') {
        console.error("Login error:", err)
      }
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-background">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle>Login</CardTitle>
          <CardDescription>
            Enter your credentials to access your account
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email</FormLabel>
                    <FormControl>
                      <Input
                        type="email"
                        placeholder="john@example.com"
                        autoComplete="email"
                        autoCapitalize="off"
                        autoCorrect="off"
                        spellCheck="false"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="password"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Password</FormLabel>
                    <FormControl>
                      <Input 
                        type="password" 
                        autoComplete="current-password"
                        {...field} 
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              {error && (
                <div 
                  className="bg-destructive/10 border border-destructive/20 text-destructive px-3 py-2 rounded-md text-sm"
                  role="alert"
                  aria-live="polite"
                >
                  {error}
                </div>
              )}
              <Button 
                type="submit" 
                className="w-full" 
                disabled={isLoading || isBlocked}
              >
                {isLoading ? "Logging in..." : "Login"}
              </Button>
            </form>
          </Form>
          <div className="mt-4 text-center text-sm">
            Don't have an account?{" "}
            <Link to="/signup" className="text-primary hover:underline">
              Sign up
            </Link>
          </div>
          <div className="mt-2 text-center text-xs text-muted-foreground">
            <Link to="/forgot-password" className="hover:underline">
              Forgot your password?
            </Link>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}