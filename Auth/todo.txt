# Auth Service ToDo List

## Initial Setup

1. Create Dockerfile and .dockerignore
2. Initialize Node.js project
   - Run `npm init -y`
3. Install dependencies
   - Express.js: `npm install express`
   - JWT: `npm install jsonwebtoken`
   - Body parser: `npm install body-parser`
   - Cors: `npm install cors`
   - Bcrypt: `npm install bcrypt`
   - Validation: `npm install joi`
   - Environment variables: `npm install dotenv`
   - Development: `npm install --save-dev nodemon typescript ts-node @types/node @types/express`
4. Create .env.example with necessary environment variables
5. Configure TypeScript (tsconfig.json)
6. Set up linting configuration (ESLint)

## Project Structure

1. Implement folder structure as outlined in claude.md
2. Create basic Express application setup
3. Configure middleware (CORS, body parsing, error handling)

## Authentication Endpoints

1. Implement user registration endpoint (`/api/auth/register`)
   - Input validation
   - Password hashing
   - User creation
   - Response handling

2. Implement user login endpoint (`/api/auth/login`)
   - Credentials validation
   - JWT token generation (access and refresh)
   - Response with tokens

3. Implement token refresh endpoint (`/api/auth/refresh`)
   - Validate refresh token
   - Generate new access token
   - Handle token rotation

4. Implement token validation endpoint (`/api/auth/validate`)
   - Verify token signature and expiration
   - Return token claims if valid

5. Implement user profile endpoint (`/api/auth/me`)
   - Extract user info from token
   - Return user profile data

## Security Implementation

1. Implement secure password hashing with bcrypt
2. Create JWT utilities
   - Token generation
   - Token verification
   - Claims extraction
3. Implement rate limiting
4. Add input sanitization

## Testing

1. Set up testing framework (Jest)
2. Write unit tests for authentication logic
3. Implement integration tests for API endpoints

## Docker Integration

1. Ensure Dockerfile correctly builds the application
2. Test the application running in Docker container
3. Verify the service is accessible from other containers in Docker Compose network

## Documentation

1. Document all authentication endpoints
2. Create detailed setup instructions
3. Document integration points with frontend and backend
