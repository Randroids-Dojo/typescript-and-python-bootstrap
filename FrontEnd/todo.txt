# FrontEnd ToDo List

## Initial Setup

1. Create Dockerfile and .dockerignore
2. Initialize React TypeScript project with Vite
   - Use the command: `npm create vite@latest . -- --template react-ts`
3. Set up shadcn
   - Install and initialize shadcn/ui: `npx shadcn-ui@latest init`
   - Configure tailwind.config.js and globals.css
   - Choose style (default), base color (slate), and CSS variables (true)
   - Enable TypeScript (tsx: true)
4. Create .env.example with necessary environment variables
5. Add linting configuration (ESLint, Prettier)

## Project Structure

1. Implement folder structure as outlined in claude.md
2. Create basic layout components (header, footer, main layout)
3. Create navigation structure

## Core Functionality

1. Implement authentication flow
   - Create auth context provider
   - Implement login page with shadcn/ui form components
   - Implement registration page with shadcn/ui form components
   - Add protected route wrapper
   - Handle JWT storage and refresh

2. Implement user dashboard
   - Create dashboard layout using shadcn/ui Card components
   - Implement profile section with shadcn/ui Avatar and forms
   - Add settings page with shadcn/ui Switch, Select, and RadioGroup components

3. Create API service layer
   - Implement authentication service
   - Create data fetching services
   - Add interceptors for JWT handling

4. Implement error handling
   - Create toast notification system using shadcn/ui Toast component
   - Add error boundaries
   - Implement loading states with shadcn/ui Skeleton components

## UI Development

1. Implement responsive layout design
2. Create form components with validation using shadcn/ui Form components
   - Utilize shadcn/ui Input, Select, Checkbox, RadioGroup, and Textarea components
   - Add form validation with proper error messaging
3. Implement dark/light theme toggle using shadcn/ui Switch component
4. Add loading skeletons for async operations using shadcn/ui Skeleton component
5. Implement data tables using shadcn/ui Table components
6. Add dialog modals using shadcn/ui Dialog component
7. Create navigation using shadcn/ui NavigationMenu component
8. Implement dropdown menus with shadcn/ui DropdownMenu component

## Testing

1. Set up testing framework (Vitest, React Testing Library)
2. Write unit tests for key components
3. Implement integration tests for major user flows

## Docker Integration

1. Ensure Dockerfile correctly builds and serves the application
2. Test the application running in Docker container
3. Verify connection to backend and auth services within Docker Compose network

## Documentation

1. Add component documentation
2. Document API integration points
3. Create README.md with setup and development instructions
